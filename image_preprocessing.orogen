name "image_preprocessing"
version "0.1"

using_library "base-types"
using_library "opencv"
import_types_from "base"

using_library "frame_helper"
import_types_from "frame_helper/Calibration.h"
import_types_from "frame_helper/FrameHelperTypes.h"

task_context "BaseTask" do
   property("calibrate","bool",false)

   property("frame_mode", "/base/samples/frame/frame_mode_t", :MODE_BAYER).
       doc "output frame mode"

   property("resize_algorithm","/frame_helper/ResizeAlgorithm",:BAYER_RESIZE)
 
   property("scale_x", "double", 0.5).
       doc "scale factor for the x direction"

   property("scale_y", "double" ,0.5).
       doc "scale factor for the y direction"

   property("offset_x",   "int", 0).
       doc "the offset to be used on the left margin in case the of resizing widescreen images"

   property("offset_y",   "int", 0).
       doc "the offset to be used on the left margin in case the of resizing widescreen images"
end

task_context "DepthImage2Pointcloud" do
    input_port("color_frame", ro_ptr("/base/samples/frame/Frame")).
        doc("Color Frame for DepthImage if availible")

    input_port "frame", ro_ptr("/base/samples/DistanceImage")
    output_port "pointcloud", "/base/samples/Pointcloud"

    port_driven 

    stream_aligner do
        max_latency 0.1
        align_port "color_frame",0.3
        align_port "frame",0.3
    end
end

task_context "MonoTask" do
    subclasses "BaseTask"

    input_port "frame", ro_ptr("/base/samples/frame/Frame")
    output_port "oframe", ro_ptr("/base/samples/frame/Frame")
    property("calibration","frame_helper/CameraCalibration")
    port_driven "frame"
end

task_context "StereoTask" do
    subclasses "BaseTask"

    input_port "frame_left", ro_ptr("/base/samples/frame/Frame")
    input_port "frame_right", ro_ptr("/base/samples/frame/Frame")
    output_port "oframe_pair", ro_ptr("/base/samples/frame/FramePair")
    property("calibration","/frame_helper/StereoCalibration")
    port_driven "frame_left","frame_right"
end


# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "image_preprocessing_test" do
    # This is a test deployment that should not be installed
    do_not_install

    task("mono_image_preprocessing", "MonoTask")
    task("stereo_image_preprocessing", "StereoTask")
end

deployment "stereo_image_preprocessing" do
    task("stereo_image_preprocessing", "StereoTask")
end
